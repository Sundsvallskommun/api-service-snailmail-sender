openapi: 3.0.1
info:
  title: SnailMailSender
  contact: {}
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: "2.1"
servers:
  - url: http://localhost:58449
    description: Generated server url
tags:
  - name: SnailMailSender
    description: SnailMailSender
paths:
  /{municipalityId}/send/snailmail:
    post:
      tags:
        - SnailMailSender
      summary: Prepare snail mail for batch
      operationId: sendSnailMail
      parameters:
        - name: x-issuer
          in: header
          description: Issuer of the request
          required: false
          schema:
            type: string
        - name: municipalityId
          in: path
          description: Municipality id
          required: true
          schema:
            type: string
          example: 2281
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendSnailMailRequest"
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Problem"
        "200":
          description: Successful Operation
        "400":
          description: Bad RequestEntity
          content:
            '*/*':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolation"
  /{municipalityId}/send/batch/{batchId}:
    post:
      tags:
        - SnailMailSender
      summary: Send batch
      operationId: sendBatch
      parameters:
        - name: municipalityId
          in: path
          description: Municipality id
          required: true
          schema:
            type: string
          example: 2281
        - name: batchId
          in: path
          description: Batch id
          required: true
          schema:
            type: string
          example: b588d1b7-7911-4e78-89d5-b710b32e0f8e
      responses:
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Problem"
        "200":
          description: Successful Operation
        "400":
          description: Bad RequestEntity
          content:
            '*/*':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolation"
  /api-docs:
    get:
      tags:
        - API
      summary: OpenAPI
      operationId: getApiDocs
      responses:
        "200":
          description: OK
          content:
            application/yaml:
              schema:
                type: string
      x-auth-type: None
      x-throttling-tier: Unlimited
      x-wso2-mutual-ssl: Optional
components:
  schemas:
    Attachment:
      required:
        - name
      type: object
      properties:
        content:
          type: string
          description: The attachment (file) content as a BASE64-encoded string
          example: aGVsbG8gd29ybGQK
        name:
          type: string
          description: The attachment filename
          example: test.pdf
        contentType:
          type: string
          description: The attachment content type
          example: application/pdf
          enum:
            - application/pdf
        envelopeType:
          type: string
          description: The envelope type for the letter
          example: WINDOWED
          enum:
            - WINDOWED
            - PLAIN
      description: Attachments
    SendSnailMailRequest:
      required:
        - batchId
        - department
      type: object
      properties:
        department:
          type: string
          description: DepartmentEntity and unit that should be billed
          example: "SBK(Gatuavdelningen, Trafiksektionen)"
        deviation:
          type: string
          description: If the letter to send deviates from the standard
          example: A3 Ritning
        batchId:
          type: string
          description: BatchEntity id to be used for creating a csv-file
          example: 6a5c3d04-412d-11ec-973a-0242ac130043
        partyId:
          type: string
          description: Party id for the person the letter should be sent to
          example: 6a5c3d04-412d-11ec-973a-0242ac130003
        attachments:
          type: array
          description: Attachments
          items:
            $ref: "#/components/schemas/Attachment"
    Problem:
      type: object
      properties:
        instance:
          type: string
          format: uri
        type:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties:
            type: object
        status:
          $ref: "#/components/schemas/StatusType"
        detail:
          type: string
        title:
          type: string
    StatusType:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        reasonPhrase:
          type: string
    ConstraintDescriptorObject:
      type: object
      properties:
        annotation:
          type: object
        attributes:
          type: object
          additionalProperties:
            type: object
        validationAppliesTo:
          type: string
          enum:
            - IMPLICIT
            - RETURN_VALUE
            - PARAMETERS
        composingConstraints:
          uniqueItems: true
          type: array
          items:
            $ref: "#/components/schemas/ConstraintDescriptorObject"
        reportAsSingleViolation:
          type: boolean
        messageTemplate:
          type: string
        valueUnwrapping:
          type: string
          enum:
            - DEFAULT
            - UNWRAP
            - SKIP
    ConstraintViolation:
      type: object
      properties:
        message:
          type: string
        messageTemplate:
          type: string
        rootBean:
          type: object
        propertyPath:
          $ref: "#/components/schemas/Path"
        executableReturnValue:
          type: object
        constraintDescriptor:
          $ref: "#/components/schemas/ConstraintDescriptorObject"
        executableParameters:
          type: array
          items:
            type: object
        invalidValue:
          type: object
        leafBean:
          type: object
    Path:
      type: object
  securitySchemes: {}
